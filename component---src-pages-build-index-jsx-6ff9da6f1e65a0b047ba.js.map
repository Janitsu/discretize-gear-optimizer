{"version":3,"file":"component---src-pages-build-index-jsx-6ff9da6f1e65a0b047ba.js","mappings":"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","sources":["webpack://discretize-gear-optimizer/./src/pages/build/index.jsx","webpack://discretize-gear-optimizer/./src/components/url-state/schema|lazy|/^\\.\\/BuildPageSchema_v.*$/|groupOptions: {}|namespace object"],"sourcesContent":["import {\n  APILanguageProvider,\n  Boon,\n  CommonEffect,\n  Condition,\n  Skill,\n  Trait,\n  TraitLine,\n} from '@discretize/gw2-ui-new';\nimport { decompress } from '@discretize/object-compression';\nimport { firstUppercase, Layout, TextDivider } from '@discretize/react-discretize-components';\nimport { Box, Paper, Typography } from '@mui/material';\nimport { graphql } from 'gatsby';\nimport { Trans, useI18next } from 'gatsby-plugin-react-i18next';\nimport * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from 'tss-react/mui';\nimport { NumberParam, StringParam, useQueryParam } from 'use-query-params';\nimport { buffModifiers, classModifiers } from '../../assets/modifierdata';\nimport HelperIcon from '../../components/baseComponents/HelperIcon';\nimport LanguageSelection from '../../components/baseComponents/LanguageSelection';\nimport ResultCharacter from '../../components/sections/results/ResultCharacter';\nimport {\n  changeBuildPage,\n  getBuffs,\n  getCharacter,\n  getSkills,\n  getTraits,\n  getWeapons,\n} from '../../state/slices/buildPage';\n\nconst useStyles = makeStyles()((theme) => ({\n  headline: {\n    paddingBottom: theme.spacing(2),\n  },\n  traitlineText: {\n    textOrientation: 'mixed',\n    fontWeight: 250,\n    textAlign: 'end',\n    overflowWrap: 'break-word',\n  },\n  traitlineRoot: {\n    padding: theme.spacing(1),\n    borderTopStyle: 'solid',\n    borderColor: theme.palette.primary.main,\n    position: 'absolute',\n    zIndex: 9999,\n    maxHeight: 133,\n  },\n  gw2component: {\n    fontSize: 20,\n  },\n}));\n\n// markup\nconst IndexPage = ({ data, location }) => {\n  const { classes } = useStyles();\n  const dispatch = useDispatch();\n  const { language } = useI18next();\n\n  // selectors from buildPage slice, will be loaded from url\n  const character = useSelector(getCharacter);\n  const weapons = useSelector(getWeapons);\n  const skills = useSelector(getSkills);\n  const { lines, selected } = useSelector(getTraits);\n  const buffs = useSelector(getBuffs);\n\n  const [buildUrl] = useQueryParam('data', StringParam);\n  const [versionParam] = useQueryParam('v', NumberParam);\n\n  // if no version is present, default to version 0\n  const version = versionParam || 0;\n\n  React.useEffect(() => {\n    if (!buildUrl) {\n      console.error('No url parameter supplied');\n      return;\n    }\n\n    // load build state from url\n    import(`../../components/url-state/schema/BuildPageSchema_v${version}`).then(\n      ({ BuildPageSchema: schema }) =>\n        decompress({\n          string: buildUrl,\n          schema,\n          onSuccess: (result) => dispatch(changeBuildPage(result)),\n        }),\n    );\n\n    return () => {};\n  }, [buildUrl, dispatch, version]);\n\n  // lookup table for specialization id -> trait line name\n  const traitLookup = [];\n  []\n    .concat(...Object.values(classModifiers))\n    .filter((item) => item.section !== 'Skills')\n    .forEach((traitLine) => {\n      traitLookup[traitLine.id] = traitLine.section;\n    });\n\n  // Component for a trait line, augmented with the name of the trait line\n  // TODO maybe move this into react-discretize-components\n  const Traits = ({ id, selected: selectedTraits }) => {\n    return (\n      <Box display=\"flex\" mb={1}>\n        <Paper elevation={0} className={classes.traitlineRoot}>\n          <Typography variant=\"body1\" className={classes.traitlineText}>\n            {traitLookup[id]}\n          </Typography>\n        </Paper>\n        <TraitLine id={id} defaultSelected={selectedTraits} selectable={false} />\n      </Box>\n    );\n  };\n\n  const AssumedBuffs = () => {\n    // filter buffs that are not applied\n    const appliedBuffs = buffModifiers\n      .flatMap((buff) => buff.items)\n      .filter((buff) => buffs[buff.id]);\n\n    return (\n      <>\n        {appliedBuffs.map(({ id, type, gw2id }) => {\n          switch (type) {\n            case 'Boon':\n              return (\n                <Boon\n                  name={firstUppercase(id)}\n                  disableText\n                  key={id}\n                  className={classes.gw2component}\n                />\n              );\n            case 'Condition':\n              return (\n                <Condition\n                  name={firstUppercase(id)}\n                  disableText\n                  key={id}\n                  className={classes.gw2component}\n                />\n              );\n            case 'Skill':\n              return <Skill id={gw2id} disableText key={id} className={classes.gw2component} />;\n            case 'Trait':\n              return <Trait id={gw2id} disableText key={id} className={classes.gw2component} />;\n            case 'CommonEffect':\n              return (\n                <CommonEffect\n                  name={firstUppercase(id)}\n                  disableText\n                  key={id}\n                  className={classes.gw2component}\n                />\n              );\n            default:\n              return null;\n          }\n        })}\n      </>\n    );\n  };\n\n  return (\n    <APILanguageProvider value={language}>\n      <Layout>\n        <LanguageSelection location={location} />\n        <Typography variant=\"h3\" className={classes.headline}>\n          <Trans>Shared Build</Trans>\n        </Typography>\n\n        <TextDivider text=\"Equipment\" />\n        <Box display=\"flex\" justifyContent=\"flex-end\">\n          <HelperIcon text=\"Assumed buffs for this build\" />\n          <AssumedBuffs />\n        </Box>\n        {character && (\n          <ResultCharacter data={data} character={character} weapons={weapons} skills={skills} />\n        )}\n\n        <TextDivider text=\"Traits\" />\n        {lines[0] && <Traits id={parseInt(lines[0], 10)} selected={selected[0]} />}\n        {lines[1] && <Traits id={parseInt(lines[1], 10)} selected={selected[1]} />}\n        {lines[2] && <Traits id={parseInt(lines[2], 10)} selected={selected[2]} />}\n      </Layout>\n    </APILanguageProvider>\n  );\n};\nexport const query = graphql`\n  query ($language: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n\n    images: allImageSharp {\n      edges {\n        node {\n          gatsbyImageData\n          original {\n            src\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","var map = {\n\t\"./BuildPageSchema_v0\": [\n\t\t72402,\n\t\t402\n\t],\n\t\"./BuildPageSchema_v0.js\": [\n\t\t72402,\n\t\t402\n\t],\n\t\"./BuildPageSchema_v1\": [\n\t\t58484,\n\t\t484\n\t],\n\t\"./BuildPageSchema_v1.js\": [\n\t\t58484,\n\t\t484\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 99696;\nmodule.exports = webpackAsyncContext;"],"names":["useStyles","makeStyles","theme","headline","paddingBottom","spacing","traitlineText","textOrientation","fontWeight","textAlign","overflowWrap","traitlineRoot","padding","borderTopStyle","borderColor","palette","primary","main","position","zIndex","maxHeight","gw2component","fontSize","data","location","classes","dispatch","useDispatch","language","useI18next","character","useSelector","getCharacter","weapons","getWeapons","skills","getSkills","getTraits","lines","selected","buffs","getBuffs","buildUrl","useQueryParam","StringParam","version","NumberParam","React","then","schema","BuildPageSchema","decompress","string","onSuccess","result","changeBuildPage","console","error","traitLookup","concat","Object","values","classModifiers","filter","item","section","forEach","traitLine","id","Traits","selectedTraits","display","mb","elevation","className","variant","defaultSelected","selectable","AssumedBuffs","appliedBuffs","buffModifiers","buff","items","map","type","gw2id","name","firstUppercase","disableText","key","value","Trans","text","justifyContent","parseInt","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","e","Error","code","ids","keys","module","exports"],"sourceRoot":""}